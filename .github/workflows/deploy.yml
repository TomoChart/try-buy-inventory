name: deploy-backend

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch: {}

env:
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PORT: ${{ secrets.SSH_PORT || '22' }}
  DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
  PM2_APP:   ${{ secrets.PM2_APP }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust VPS host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${SSH_PORT}" "${SSH_HOST}" >> ~/.ssh/known_hosts

      - name: Rsync backend to VPS (preserve .env on server)
        run: |
          rsync -az --delete \
            --exclude '.env' \
            --exclude 'node_modules' \
            --exclude '.git' \
            backend/ "${SSH_USER}@${SSH_HOST}:${DEPLOY_PATH}/"

      # (OPCIJSKI) Ako želiš .env držati kao secret u GitHubu (multiline):
      # - name: Write .env on server
      #   if: ${{ secrets.BACKEND_ENV_FILE != '' }}
      #   run: |
      #     ssh -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" 'bash -lc "
      #       cat > '"${DEPLOY_PATH}"'/.env <<'"'EOF'"'
      #       ${{ secrets.BACKEND_ENV_FILE }}
      #       EOF
      #     "'

      - name: Install Node, deps and (re)start PM2 on VPS
        run: |
          ssh -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" 'bash -lc "
            set -euo pipefail
            cd '"${DEPLOY_PATH}"'

            # --- Ensure PM2 is installed and on PATH ---
            # install pm2 if missing
            if ! command -v pm2 >/dev/null 2>&1; then
              npm install -g pm2
            fi

            # add npm global bin to PATH for this session
            NPMBIN="$(npm bin -g 2>/dev/null || true)"
            if [ -n "$NPMBIN" ] && ! echo "$PATH" | grep -q "$NPMBIN"; then
              export PATH="$NPMBIN:$PATH"
            fi

            pm2 -v

            # NVM/Node u login shellu
            if [ ! -s ~/.nvm/nvm.sh ]; then
              curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            fi
            . ~/.nvm/nvm.sh
            nvm install 22
            nvm use 22

            npm ci --omit=dev
            npx prisma generate || true

            # --- Start or reload the app safely ---
            APP_NAME="trybuy-api"            # promijeni ako koristiš drugo ime
            if pm2 describe "$APP_NAME" >/dev/null 2>&1; then
              pm2 reload "$APP_NAME"
            else
              # ako imaš ecosystem.config.js u backendu, koristi ga:
              if [ -f ecosystem.config.js ]; then
                pm2 start ecosystem.config.js --only "$APP_NAME" || pm2 start ecosystem.config.js --name "$APP_NAME"
              else
                # fallback: pokreni index.js iz backend direktorija
                pm2 start index.js --name "$APP_NAME"
              fi
            fi

            pm2 save
          "'

      - name: Healthcheck backend (localhost)
        id: health
        run: |
          ssh -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" 'bash -lc "
            set -e
            curl -fsS --max-time 8 http://127.0.0.1:8080/healthz
          "'

      - name: Show PM2 logs if healthcheck failed
        if: failure() && steps.health.outcome == 'failure'
        run: |
          ssh -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" 'bash -lc "
            pm2 status || true
            echo '===== ERROR LOG ====='
            tail -n 120 ~/.pm2/logs/'"${PM2_APP}"'-error.log || true
            echo '===== OUT LOG ====='
            tail -n 80 ~/.pm2/logs/'"${PM2_APP}"'-out.log || true
          "'
