name: reset-user

on:
  workflow_dispatch:
    inputs:
      email:
        description: "Email korisnika (npr. t.martinovic@mpg.hr)"
        required: true
      password:
        description: "Nova lozinka"
        required: true

jobs:
  reset:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (nije nužno, ali ok)
        uses: actions/checkout@v4

      - name: Install bcryptjs
        run: npm install bcryptjs@2.x --no-audit --no-fund

      - name: Hash password & update user in DB
        run: |
          # 1) generiraj bcrypt hash lokalno u actionu (nema ESM glavobolje)
          npm init -y >/dev/null 2>&1
          npm i bcryptjs >/dev/null 2>&1
          HASH=$(node -e "const b=require('bcryptjs'); console.log(b.hashSync(process.env.PW, 12));" )
          echo "Generated hash length: $(printf "%s" "$HASH" | wc -c)"

          # 2) sigurno upiši u Postgres (single-quoted heredoc sprječava ekspanziju $)
          psql "${{ env.PG_URL }}" <<'SQL'
          DO $do$
          DECLARE
            v_email text := '${{ github.event.inputs.email }}';
            v_hash  text := 'REPLACE_ME';
          BEGIN
            UPDATE "User"
               SET "passwordHash" = v_hash,
                   "updatedAt" = NOW()
             WHERE email = v_email;
          END $do$;
          SQL

          # 3) zamijeni REPLACE_ME točnim hashom bez da shell dira $ znakove
          #    (psql je već izvršen; gornji DO blok je samo “template” – umjesto DO koristi ovaj direktni UPDATE):
          psql "${{ env.PG_URL }}" -c "UPDATE \"User\" SET \"passwordHash\"='$(printf %s \"$HASH\" | sed "s/'/''/g")', \"updatedAt\"=NOW() WHERE email='${{ github.event.inputs.email }}';"

          # 4) pokaži prva 3 znaka hasha radi provjere (bez iznošenja cijelog hasha)
          echo "Hash prefix: $(printf '%s' \"$HASH\" | cut -c1-7)"
        env:
          PW: ${{ github.event.inputs.password }}
          PGPASSWORD: ${{ secrets.PG_PASS }}


      - name: Read hash from DB (mask safely)
        run: |
          H=$(psql "${{ env.PG_URL }}" -Atc "SELECT \"passwordHash\" FROM \"User\" WHERE email='${{ github.event.inputs.email }}';")
          echo "HASH_LEN=$(printf '%s' "$H" | wc -c)" >> $GITHUB_OUTPUT
          echo "HASH_PREFIX=$(printf '%s' "$H" | cut -c1-7)" >> $GITHUB_OUTPUT
          echo "DB_HASH=$H" >> $GITHUB_ENV
        env:
          PGPASSWORD: ${{ secrets.PG_PASS }}

      - name: Check bcrypt compare on VPS
        run: |
          npm init -y >/dev/null 2>&1
          npm i bcryptjs >/dev/null 2>&1
          node -e "const b=require('bcryptjs');const pw='${{ github.event.inputs.password }}';const h=process.env.DB_HASH; b.compare(pw,h).then(ok=>{console.log('BCRYPT_MATCH=',ok); if(!ok) process.exit(2);});"
        env:
          DB_HASH: ${{ env.DB_HASH }}
