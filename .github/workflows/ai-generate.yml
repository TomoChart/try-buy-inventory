name: AI Generate App (PR)

on:
  workflow_dispatch:
    inputs:
      spec_path:
        description: "Path to spec file"
        default: ".blueprints/spec.md"
        required: true
  push:
    paths: [".blueprints/**"]

permissions:
  contents: write
  pull-requests: write

jobs:
  ai-generate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Read SPEC (base64)
        run: |
          SPEC_PATH="${{ github.event.inputs.spec_path || '.blueprints/spec.md' }}"
          SPEC_B64=$(base64 -w0 "$SPEC_PATH" || base64 "$SPEC_PATH")
          echo "SPEC_B64=$SPEC_B64" >> $GITHUB_ENV


      - name: Call OpenAI to generate files
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SPEC_B64: ${{ env.SPEC_B64 }}
        run: |
          node <<'JS'
          import fs from 'fs';
          import https from 'https';

          const spec = Buffer.from(process.env.SPEC_B64 || '', 'base64').toString('utf8');

          const systemMsg = `
          You are a senior fullâ€‘stack engineer. Output STRICT JSON:
          {
            "commitMessage": "string",
            "files": [
              {"path": "frontend/...","content": "string"},
              {"path": "backend/...","content": "string"}
            ],
            "notes": "string"
          }`;

          const userMsg = `
          Project SPEC:
          ${spec}
          Return initial scaffold: Next.js 14 FE (pages: /login, /trybuy, /devices, /reports, /btl, /imports, /settings with sidebar) + Express BE (stub routes). Include package.json and .env.example for both. No binaries.`;

          const payload = JSON.stringify({
            model: "gpt-4o",
            temperature: 0.2,
            messages: [
              { role: "system", content: systemMsg },
              { role: "user", content: userMsg }
            ],
            response_format: { type: "json_object" }
          });

          function callOpenAI() {
            return new Promise((resolve, reject) => {
              const req = https.request({
                hostname: 'api.openai.com',
                path: '/v1/chat/completions',
                method: 'POST',
                headers: {
                  'Authorization': 'Bearer ' + process.env.OPENAI_API_KEY,
                  'Content-Type': 'application/json'
                }
              }, res => {
                let body = '';
                res.on('data', c => body += c);
                res.on('end', () => {
                  try {
                    const data = JSON.parse(body);
                    const out = JSON.parse(data.choices[0].message.content);
                    resolve(out);
                  } catch (e) {
                    console.error('OpenAI response error:\n', body);
                    reject(e);
                  }
                });
              });
              req.on('error', reject);
              req.write(payload);
              req.end();
            });
          }

          const out = await callOpenAI();

          for (const f of out.files) {
            const dir = f.path.split('/').slice(0,-1).join('/');
            if (dir) fs.mkdirSync(dir, { recursive: true });
            fs.writeFileSync(f.path, f.content);
            console.log("Wrote", f.path);
          }
          fs.writeFileSync(".ai-notes.txt", out.notes || "");
          fs.writeFileSync(".ai-commit.txt", out.commitMessage || "AI: scaffold/update");
          JS


      - name: Create PR with changes
        uses: peter-evans/create-pull-request@v6
        with:
          title: "AI codegen: ${{ github.run_id }}"
          body: |
            Generated from ${{ github.event.inputs.spec_path || '.blueprints/spec.md' }}.

            Notes:
            ```
            ${{ steps.spec.outputs.SPEC }}
            ```
          commit-message: "$(cat .ai-commit.txt || echo 'AI: scaffold/update')"
          branch: "ai/gen-${{ github.run_id }}"
          delete-branch: true
          base: "main"
