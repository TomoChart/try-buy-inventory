name: AI Generate App (PR)

on:
  workflow_dispatch:
    inputs:
      spec_path:
        description: "Path to spec file"
        default: ".blueprints/spec.md"
        required: true
  push:
    paths: [".blueprints/**"]

jobs:
  ai-generate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps for generator
        run: |
          mkdir -p .ai
          npm init -y >/dev/null 2>&1 || true
          npm i --silent js-yaml

      - name: Read SPEC
        id: spec
        run: |
          SPEC_CONTENT="$(cat ${{ github.event.inputs.spec_path || '.blueprints/spec.md' }})"
          echo "SPEC<<EOF" >> $GITHUB_OUTPUT
          echo "$SPEC_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Call OpenAI to generate file plan + contents
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          node <<'JS'
          const fs = require('fs');
          const spec = process.env.SPEC || `\n${{ steps.spec.outputs.SPEC }}\n`;

          const system = `
You are a senior fullâ€‘stack engineer. Output STRICT JSON:
{
  "commitMessage": "string",
  "files": [
    {"path": "frontend/...","content": "string"},
    {"path": "backend/...","content": "string"}
  ],
  "notes": "short rationale"
}
Rules:
- Next.js 14 + Tailwind frontend with pages: /login, /trybuy, /devices, /reports, /btl, /imports, /settings (sidebar).
- Express backend with stub routes for auth, locations, devices, applications, loans, btl, reports, imports.
- Provide working package.json for both apps, minimal configs, and .env.example files.
- DO NOT write secrets. No binary files. Keep each file under 200KB.
`;

          const user = `
Project SPEC:
${spec}

Return files to implement the skeleton + basic UI stubs and API stubs, as described.
`;

          async function call() {
            const r = await fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: {
                "Authorization": "Bearer " + process.env.OPENAI_API_KEY,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                model: "gpt-4o",
                temperature: 0.2,
                messages: [
                  {role:"system", content: system},
                  {role:"user", content: user}
                ],
                response_format: { type: "json_object" }
              })
            });
            if (!r.ok) {
              console.error(await r.text());
              process.exit(1);
            }
            const data = await r.json();
            const out = JSON.parse(data.choices[0].message.content);

            // write files
            for (const f of out.files) {
              const dir = f.path.split('/').slice(0, -1).join('/');
              if (dir) fs.mkdirSync(dir, { recursive: true });
              fs.writeFileSync(f.path, f.content);
              console.log("Wrote", f.path);
            }
            fs.writeFileSync(".ai/notes.txt", out.notes || "");
            fs.writeFileSync(".ai/commitmsg.txt", out.commitMessage || "AI: scaffold/update");
          }
          call().catch(e => { console.error(e); process.exit(1); });
          JS

      - name: Create branch and commit
        run: |
          BR="ai/gen-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BR"
          git add -A
          MSG="$(cat .ai/commitmsg.txt || echo 'AI: scaffold/update')"
          git -c user.name="ai-bot" -c user.email="ai-bot@users.noreply.github.com" commit -m "$MSG" || echo "No changes"
          git push --set-upstream origin "$BR"

      - name: Open Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          commit-message: "$(cat .ai/commitmsg.txt || echo 'AI: scaffold/update')"
          branch: ${{ steps.create_branch.outputs.branch || '' }}
          title: "AI codegen: $(date +'%Y-%m-%d %H:%M')"
          body: |
            AI generated changes based on ${{ github.event.inputs.spec_path || '.blueprints/spec.md' }}.
            Notes:
            ```
            $(cat .ai/notes.txt || echo '(none)')
            ```
          base: "main"
